// generated by Stubber

@import Foundation;
// category - class exists but is missing selectors
@interface CADisplay:NSObject
@end
@interface CADisplay(Stub)
@end
@implementation CADisplay(Stub)
// isCloning c c16@0:8
-(char)isCloning
{
	return 0;
}
// overrideDisplayTimings: v v24@0:8@16
-(void)overrideDisplayTimings:(id)arg2
{
	return ;
}
// displayType q q16@0:8
-(long long)displayType
{
	return 0;
}
// latency d d16@0:8
-(double)latency
{
	return 0;
}
// setLatency: v v24@0:8d16
-(void)setLatency:(double)arg2
{
	return ;
}
@end
// category - class exists but is missing selectors
@interface CADisplayLink:NSObject
@end
@interface CADisplayLink(Stub)
@end
@implementation CADisplayLink(Stub)
// setPriority: v v24@0:8q16
-(void)setPriority:(long long)arg2
{
	return ;
}
// priority q q16@0:8
-(long long)priority
{
	return 0;
}
@end
// category - class exists but is missing selectors
@interface CADisplayMode:NSObject
@end
@interface CADisplayMode(Stub)
@end
@implementation CADisplayMode(Stub)
// _setPreferredUIScale: v v20@0:8I16
-(void)_setPreferredUIScale:(unsigned int)arg2
{
	return ;
}
@end
// category - class exists but is missing selectors
@interface CAMeshTransform:NSObject
@end
@interface CAMeshTransform(Stub)
@end
@implementation CAMeshTransform(Stub)
// inverseMesh @ @16@0:8
-(id)inverseMesh
{
	return nil;
}
// subdividedMesh: @ @20@0:8i16
-(id)subdividedMesh:(int)arg2
{
	return nil;
}
@end
// category - class exists but is missing selectors
@interface CAEmitterCell:NSObject
@end
@interface CAEmitterCell(Stub)
@end
@implementation CAEmitterCell(Stub)
// CAMLTypeSupportedForKey: c c24@0:8@16
-(char)CAMLTypeSupportedForKey:(id)arg2
{
	return 0;
}
@end
// category - class exists but is missing selectors
@interface CAStateAddElement:NSObject
@end
@interface CAStateAddElement(Stub)
@end
@implementation CAStateAddElement(Stub)
// CAMLTypeSupportedForKey: c c24@0:8@16
-(char)CAMLTypeSupportedForKey:(id)arg2
{
	return 0;
}
@end
// category - class exists but is missing selectors
@interface CAMetalDrawable:NSObject
@end
@interface CAMetalDrawable(Stub)
@end
@implementation CAMetalDrawable(Stub)
// didPresentAtTime: v v24@0:8d16
-(void)didPresentAtTime:(double)arg2
{
	return ;
}
// hasPresentedHandlers c c16@0:8
-(char)hasPresentedHandlers
{
	return 0;
}
// setDrawableID: v v24@0:8Q16
-(void)setDrawableID:(unsigned long long)arg2
{
	return ;
}
// sharedEvent @ @16@0:8
-(id)sharedEvent
{
	return nil;
}
// setSharedEvent: v v24@0:8@16
-(void)setSharedEvent:(id)arg2
{
	return ;
}
// insertSeed I I16@0:8
-(unsigned int)insertSeed
{
	return 0;
}
// setInsertSeed: v v20@0:8I16
-(void)setInsertSeed:(unsigned int)arg2
{
	return ;
}
// setPresentedTime: v v24@0:8d16
-(void)setPresentedTime:(double)arg2
{
	return ;
}
// status Q Q16@0:8
-(unsigned long long)status
{
	return 0;
}
// setStatus: v v24@0:8Q16
-(void)setStatus:(unsigned long long)arg2
{
	return ;
}
// presentAfterMinimumDuration: v v24@0:8d16
-(void)presentAfterMinimumDuration:(double)arg2
{
	return ;
}
// addPresentedHandler: v v24@0:8@?16
-(void)addPresentedHandler:(id)arg2
{
	return ;
}
// presentedTime d d16@0:8
-(double)presentedTime
{
	return 0;
}
// drawableID Q Q16@0:8
-(unsigned long long)drawableID
{
	return 0;
}
@end
// stub - class doesn't exist at all
@interface CAEDRMetadata:NSObject
{
	void* _priv;
}
@end
@implementation CAEDRMetadata
// initWithSEIMasteringDisplayData:contentLightLevelData: @ @32@0:8@16@24
-(id)initWithSEIMasteringDisplayData:(id)arg2 contentLightLevelData:(id)arg3
{
	return nil;
}
// initWithSEIMasteringDisplayData:contentLightLevelData:opticalOutputScale: @ @36@0:8@16@24f32
-(id)initWithSEIMasteringDisplayData:(id)arg2 contentLightLevelData:(id)arg3 opticalOutputScale:(float)arg4
{
	return nil;
}
// initWithMasteringDisplayMinNits:maxNits:opticalOutputScale: @ @28@0:8f16f20f24
-(id)initWithMasteringDisplayMinNits:(float)arg2 maxNits:(float)arg3 opticalOutputScale:(float)arg4
{
	return nil;
}
// initWithBT2100HLG @ @16@0:8
-(id)initWithBT2100HLG
{
	return nil;
}
// dealloc v v16@0:8
// skipped - in StubberObjcHelper.bannedMethods
// description @ @16@0:8
-(id)description
{
	return nil;
}
// HDR10MetadataWithDisplayInfo:contentInfo:opticalOutputScale: @ @36@0:8@16@24f32
+(id)HDR10MetadataWithDisplayInfo:(id)arg2 contentInfo:(id)arg3 opticalOutputScale:(float)arg4
{
	return nil;
}
// HDR10MetadataWithMinLuminance:maxLuminance:opticalOutputScale: @ @28@0:8f16f20f24
+(id)HDR10MetadataWithMinLuminance:(float)arg2 maxLuminance:(float)arg3 opticalOutputScale:(float)arg4
{
	return nil;
}
// HLGMetadata @ @16@0:8
+(id)HLGMetadata
{
	return nil;
}
// setMetadata:onSurface: v v32@0:8@16^{__IOSurface=}24
+(void)setMetadata:(id)arg2 onSurface:(void*)arg3
{
	return ;
}
@end
// category - class exists but is missing selectors
@interface CAMetalLayer:NSObject
@end
@interface CAMetalLayer(Stub)
@end
@implementation CAMetalLayer(Stub)
// setMuxLockEnabled: v v20@0:8c16
-(void)setMuxLockEnabled:(char)arg2
{
	return ;
}
// muxLockEnabled c c16@0:8
-(char)muxLockEnabled
{
	return 0;
}
// setContents: v v24@0:8@16
-(void)setContents:(id)arg2
{
	return ;
}
// preferredDevice @ @16@0:8
-(id)preferredDevice
{
	return nil;
}
// removeBackBuffers v v16@0:8
-(void)removeBackBuffers
{
	return ;
}
@end
// category - class exists but is missing selectors
@interface CALayer:NSObject
@end
@interface CALayer(Stub)
@end
@implementation CALayer(Stub)
// setCreatesCompositingGroup: v v20@0:8c16
-(void)setCreatesCompositingGroup:(char)arg2
{
	return ;
}
// CAMLTypeSupportedForKey: c c24@0:8@16
-(char)CAMLTypeSupportedForKey:(id)arg2
{
	return 0;
}
// CA_archivingValueForKey: @ @24@0:8@16
-(id)CA_archivingValueForKey:(id)arg2
{
	return nil;
}
// isSeparated c c16@0:8
-(char)isSeparated
{
	return 0;
}
// setSeparated: v v20@0:8c16
-(void)setSeparated:(char)arg2
{
	return ;
}
// separatedOptions @ @16@0:8
-(id)separatedOptions
{
	return nil;
}
// setSeparatedOptions: v v24@0:8@16
-(void)setSeparatedOptions:(id)arg2
{
	return ;
}
// invertsContentsAreFlipped c c16@0:8
-(char)invertsContentsAreFlipped
{
	return 0;
}
// setInvertsContentsAreFlipped: v v20@0:8c16
-(void)setInvertsContentsAreFlipped:(char)arg2
{
	return ;
}
// createsCompositingGroup c c16@0:8
-(char)createsCompositingGroup
{
	return 0;
}
// addLayoutDependent: v v24@0:8@16
-(void)addLayoutDependent:(id)arg2
{
	return ;
}
// removeLayoutDependent: v v24@0:8@16
-(void)removeLayoutDependent:(id)arg2
{
	return ;
}
// layoutDependents @ @16@0:8
-(id)layoutDependents
{
	return nil;
}
// setLayoutDependents: v v24@0:8@16
-(void)setLayoutDependents:(id)arg2
{
	return ;
}
// cornerCurve @ @16@0:8
-(id)cornerCurve
{
	return nil;
}
// setCornerCurve: v v24@0:8@16
-(void)setCornerCurve:(id)arg2
{
	return ;
}
// observationInfo ^v ^v16@0:8
// skipped - in StubberObjcHelper.bannedMethods
// setObservationInfo: v v24@0:8^v16
// skipped - in StubberObjcHelper.bannedMethods
// setSecurityMode: v v24@0:8@16
-(void)setSecurityMode:(id)arg2
{
	return ;
}
// setUnsafeUnretainedDelegate: v v24@0:8@16
-(void)setUnsafeUnretainedDelegate:(id)arg2
{
	return ;
}
// setContentsAlignsToPixels: v v20@0:8c16
-(void)setContentsAlignsToPixels:(char)arg2
{
	return ;
}
// contentsAlignsToPixels c c16@0:8
-(char)contentsAlignsToPixels
{
	return 0;
}
// unsafeUnretainedDelegate @ @16@0:8
-(id)unsafeUnretainedDelegate
{
	return nil;
}
// securityMode @ @16@0:8
-(id)securityMode
{
	return nil;
}
// initialize v v16@0:8
+(void)initialize
{
	return ;
}
// cornerCurveExpansionFactor: d d24@0:8@16
+(double)cornerCurveExpansionFactor:(id)arg2
{
	return 0;
}
@end
// category - class exists but is missing selectors
@interface CAStateSetValue:NSObject
@end
@interface CAStateSetValue(Stub)
@end
@implementation CAStateSetValue(Stub)
// CAMLTypeSupportedForKey: c c24@0:8@16
-(char)CAMLTypeSupportedForKey:(id)arg2
{
	return 0;
}
@end
// stub - class doesn't exist at all
@interface CAWindowServer:NSObject
{
	void* _impl;
	char _mirroringEnabled;
}
@end
@implementation CAWindowServer
// addDisplay: v v24@0:8@16
-(void)addDisplay:(id)arg2
{
	return ;
}
// removeAllDisplays v v16@0:8
-(void)removeAllDisplays
{
	return ;
}
// displayWithName: @ @24@0:8@16
-(id)displayWithName:(id)arg2
{
	return nil;
}
// displayWithDisplayId: @ @20@0:8I16
-(id)displayWithDisplayId:(unsigned int)arg2
{
	return nil;
}
// displayWithUniqueId: @ @24@0:8@16
-(id)displayWithUniqueId:(id)arg2
{
	return nil;
}
// _detectDisplays v v16@0:8
-(void)_detectDisplays
{
	return ;
}
// setRendererFlags: v v20@0:8I16
-(void)setRendererFlags:(unsigned int)arg2
{
	return ;
}
// rendererFlags I I16@0:8
-(unsigned int)rendererFlags
{
	return 0;
}
// secureModeViolations @ @16@0:8
-(id)secureModeViolations
{
	return nil;
}
// insecureProcessIds @ @16@0:8
-(id)insecureProcessIds
{
	return nil;
}
// clientPortOfContextId: I I20@0:8I16
-(unsigned int)clientPortOfContextId:(unsigned int)arg2
{
	return 0;
}
// taskNamePortOfContextId: I I20@0:8I16
-(unsigned int)taskNamePortOfContextId:(unsigned int)arg2
{
	return 0;
}
// isMirroringEnabled c c16@0:8
-(char)isMirroringEnabled
{
	return 0;
}
// setMirroringEnabled: v v20@0:8c16
-(void)setMirroringEnabled:(char)arg2
{
	return ;
}
// init @ @16@0:8
-(id)init
{
	return nil;
}
// dealloc v v16@0:8
// skipped - in StubberObjcHelper.bannedMethods
// description @ @16@0:8
-(id)description
{
	return nil;
}
// _init @ @16@0:8
-(id)_init
{
	return nil;
}
// displays @ @16@0:8
-(id)displays
{
	return nil;
}
// contextIdHostingContextId: I I20@0:8I16
-(unsigned int)contextIdHostingContextId:(unsigned int)arg2
{
	return 0;
}
// isSecure c c16@0:8
-(char)isSecure
{
	return 0;
}
// setSecure: v v20@0:8c16
-(void)setSecure:(char)arg2
{
	return ;
}
// removeDisplay: v v24@0:8@16
-(void)removeDisplay:(id)arg2
{
	return ;
}
// serverWithOptions: @ @24@0:8@16
+(id)serverWithOptions:(id)arg2
{
	return nil;
}
// serverIfRunning @ @16@0:8
+(id)serverIfRunning
{
	return nil;
}
// context @ @16@0:8
+(id)context
{
	return nil;
}
// contextWithOptions: @ @24@0:8@16
+(id)contextWithOptions:(id)arg2
{
	return nil;
}
// server @ @16@0:8
+(id)server
{
	return nil;
}
@end
// stub - class doesn't exist at all
@interface CAWindowServerDisplay:NSObject
{
	void* _impl;
	char _mirroringEnabled;
}
@end
@implementation CAWindowServerDisplay
// allowsVirtualModes c c16@0:8
-(char)allowsVirtualModes
{
	return 0;
}
// setAllowsVirtualModes: v v20@0:8c16
-(void)setAllowsVirtualModes:(char)arg2
{
	return ;
}
// overscanAmount d d16@0:8
-(double)overscanAmount
{
	return 0;
}
// supportsExtendedColors c c16@0:8
-(char)supportsExtendedColors
{
	return 0;
}
// allowsDisplayCompositing c c16@0:8
-(char)allowsDisplayCompositing
{
	return 0;
}
// rendererFlags I I16@0:8
-(unsigned int)rendererFlags
{
	return 0;
}
// clientPortOfContextId: I I20@0:8I16
-(unsigned int)clientPortOfContextId:(unsigned int)arg2
{
	return 0;
}
// taskNamePortOfContextId: I I20@0:8I16
-(unsigned int)taskNamePortOfContextId:(unsigned int)arg2
{
	return 0;
}
// isMirroringEnabled c c16@0:8
-(char)isMirroringEnabled
{
	return 0;
}
// setMirroringEnabled: v v20@0:8c16
-(void)setMirroringEnabled:(char)arg2
{
	return ;
}
// _initWithCADisplayServer: @ @24@0:8^{Server=^^?{SpinLock={?=i}}{Mutex={_opaque_pthread_mutex_t=q[56c]}}@^{Display}^{__CFString}^{ContextItem}QQ^{ContextItem}Q{SpinLock={?=i}}^{PendingOperation}^{Context}^{Shape}I^{Context}^{Renderer}{Bounds=iiii}ddIb1b1b1b1b1b1b1b1b1}16
-(id)_initWithCADisplayServer:(void*)arg2
{
	return nil;
}
// contextIdAtPosition: I I32@0:8{CGPoint=dd}16
-(unsigned int)contextIdAtPosition:(NSString*)arg2
{
	return 0;
}
// contextIdAtPosition:excludingContextIds: I I40@0:8{CGPoint=dd}16@32
-(unsigned int)contextIdAtPosition:(NSString*)arg2 excludingContextIds:(id)arg3
{
	return 0;
}
// clientPortAtPosition: I I32@0:8{CGPoint=dd}16
-(unsigned int)clientPortAtPosition:(NSString*)arg2
{
	return 0;
}
// transformFromLayerId:inContextId: {CATransform3D=dddddddddddddddd} {CATransform3D=dddddddddddddddd}28@0:8Q16I24
-(NSString*)transformFromLayerId:(unsigned long long)arg2 inContextId:(unsigned int)arg3
{
	return @"unimplemented!";
}
// clones @ @16@0:8
-(id)clones
{
	return nil;
}
// addClone:options: v v32@0:8@16@24
-(void)addClone:(id)arg2 options:(id)arg3
{
	return ;
}
// addClone: v v24@0:8@16
-(void)addClone:(id)arg2
{
	return ;
}
// removeClone: v v24@0:8@16
-(void)removeClone:(id)arg2
{
	return ;
}
// removeAllClones v v16@0:8
-(void)removeAllClones
{
	return ;
}
// cloneMaster @ @16@0:8
-(id)cloneMaster
{
	return nil;
}
// setBlanked: v v20@0:8c16
-(void)setBlanked:(char)arg2
{
	return ;
}
// isBlanked c c16@0:8
-(char)isBlanked
{
	return 0;
}
// willUnblank v v16@0:8
-(void)willUnblank
{
	return ;
}
// setCalibrationPhase:forIdentifier: v v24@0:8I16I20
-(void)setCalibrationPhase:(unsigned int)arg2 forIdentifier:(unsigned int)arg3
{
	return ;
}
// setFlipBookEnabled: v v20@0:8c16
-(void)setFlipBookEnabled:(char)arg2
{
	return ;
}
// isFlipBookEnabled c c16@0:8
-(char)isFlipBookEnabled
{
	return 0;
}
// setOverscanAmount: v v24@0:8d16
-(void)setOverscanAmount:(double)arg2
{
	return ;
}
// setOverscanAmounts: v v32@0:8{CGSize=dd}16
-(void)setOverscanAmounts:(NSString*)arg2
{
	return ;
}
// setInvertsColors: v v20@0:8c16
-(void)setInvertsColors:(char)arg2
{
	return ;
}
// invertsColors c c16@0:8
-(char)invertsColors
{
	return 0;
}
// setAllowsExtendedDynamicRange: v v20@0:8c16
-(void)setAllowsExtendedDynamicRange:(char)arg2
{
	return ;
}
// allowsExtendedDynamicRange c c16@0:8
-(char)allowsExtendedDynamicRange
{
	return 0;
}
// isGrayscale c c16@0:8
-(char)isGrayscale
{
	return 0;
}
// setColorMatrix:scale:rampDuration: v v36@0:8^f16f24d28
-(void)setColorMatrix:(void*)arg2 scale:(float)arg3 rampDuration:(double)arg4
{
	return ;
}
// nits f f16@0:8
-(float)nits
{
	return 0;
}
// setNits: v v20@0:8f16
-(void)setNits:(float)arg2
{
	return ;
}
// setAccessibilityColorMatrix:scale: v v28@0:8^f16f24
-(void)setAccessibilityColorMatrix:(void*)arg2 scale:(float)arg3
{
	return ;
}
// setMaximumBrightness: v v20@0:8f16
-(void)setMaximumBrightness:(float)arg2
{
	return ;
}
// maximumBrightness f f16@0:8
-(float)maximumBrightness
{
	return 0;
}
// maximumLuminance f f16@0:8
-(float)maximumLuminance
{
	return 0;
}
// setMinimumRefreshRate: v v20@0:8f16
-(void)setMinimumRefreshRate:(float)arg2
{
	return ;
}
// minimumRefreshRate f f16@0:8
-(float)minimumRefreshRate
{
	return 0;
}
// setMaximumRefreshRate: v v20@0:8f16
-(void)setMaximumRefreshRate:(float)arg2
{
	return ;
}
// setIdealRefreshRate: v v20@0:8f16
-(void)setIdealRefreshRate:(float)arg2
{
	return ;
}
// idealRefreshRate f f16@0:8
-(float)idealRefreshRate
{
	return 0;
}
// setUsesPreferredModeRefreshRate: v v20@0:8c16
-(void)setUsesPreferredModeRefreshRate:(char)arg2
{
	return ;
}
// usesPreferredModeRefreshRate c c16@0:8
-(char)usesPreferredModeRefreshRate
{
	return 0;
}
// setTVMode: v v24@0:8@16
-(void)setTVMode:(id)arg2
{
	return ;
}
// TVMode @ @16@0:8
-(id)TVMode
{
	return nil;
}
// setTVSignalType: v v24@0:8@16
-(void)setTVSignalType:(id)arg2
{
	return ;
}
// TVSignalType @ @16@0:8
-(id)TVSignalType
{
	return nil;
}
// setDisablesUpdates: v v20@0:8c16
-(void)setDisablesUpdates:(char)arg2
{
	return ;
}
// disablesUpdates c c16@0:8
-(char)disablesUpdates
{
	return 0;
}
// setProcessId: v v20@0:8i16
-(void)setProcessId:(int)arg2
{
	return ;
}
// overscanAmounts {CGSize=dd} {CGSize=dd}16@0:8
-(NSString*)overscanAmounts
{
	return @"unimplemented!";
}
// dealloc v v16@0:8
// skipped - in StubberObjcHelper.bannedMethods
// description @ @16@0:8
-(id)description
{
	return nil;
}
// invalidate v v16@0:8
-(void)invalidate
{
	return ;
}
// bounds {CGRect={CGPoint=dd}{CGSize=dd}} {CGRect={CGPoint=dd}{CGSize=dd}}16@0:8
-(NSString*)bounds
{
	return @"unimplemented!";
}
// name @ @16@0:8
-(id)name
{
	return nil;
}
// setColorMode: v v24@0:8@16
-(void)setColorMode:(id)arg2
{
	return ;
}
// scale d d16@0:8
-(double)scale
{
	return 0;
}
// setDisabled: v v20@0:8c16
-(void)setDisabled:(char)arg2
{
	return ;
}
// orientation @ @16@0:8
-(id)orientation
{
	return nil;
}
// setOrientation: v v24@0:8@16
-(void)setOrientation:(id)arg2
{
	return ;
}
// tag q q16@0:8
-(long long)tag
{
	return 0;
}
// setTag: v v24@0:8q16
-(void)setTag:(long long)arg2
{
	return ;
}
// deviceName @ @16@0:8
-(id)deviceName
{
	return nil;
}
// update v v16@0:8
-(void)update
{
	return ;
}
// uniqueId @ @16@0:8
-(id)uniqueId
{
	return nil;
}
// disabled c c16@0:8
-(char)disabled
{
	return 0;
}
// setScale: v v24@0:8d16
-(void)setScale:(double)arg2
{
	return ;
}
// maximumRefreshRate f f16@0:8
-(float)maximumRefreshRate
{
	return 0;
}
// contrast f f16@0:8
-(float)contrast
{
	return 0;
}
// setContrast: v v20@0:8f16
-(void)setContrast:(float)arg2
{
	return ;
}
// convertPoint:fromContextId: {CGPoint=dd} {CGPoint=dd}36@0:8{CGPoint=dd}16I32
-(NSString*)convertPoint:(NSString*)arg2 fromContextId:(unsigned int)arg3
{
	return @"unimplemented!";
}
// convertPoint:toContextId: {CGPoint=dd} {CGPoint=dd}36@0:8{CGPoint=dd}16I32
-(NSString*)convertPoint:(NSString*)arg2 toContextId:(unsigned int)arg3
{
	return @"unimplemented!";
}
// displayId I I16@0:8
-(unsigned int)displayId
{
	return 0;
}
// setAllowsDisplayCompositing: v v20@0:8c16
-(void)setAllowsDisplayCompositing:(char)arg2
{
	return ;
}
// colorMode @ @16@0:8
-(id)colorMode
{
	return nil;
}
// isSecure c c16@0:8
-(char)isSecure
{
	return 0;
}
// freeze v v16@0:8
-(void)freeze
{
	return ;
}
// setSecure: v v20@0:8c16
-(void)setSecure:(char)arg2
{
	return ;
}
// setGrayscale: v v20@0:8c16
-(void)setGrayscale:(char)arg2
{
	return ;
}
// whitepoint {?=ff} {?=ff}16@0:8
-(NSString*)whitepoint
{
	return @"unimplemented!";
}
// processId i i16@0:8
-(int)processId
{
	return 0;
}
@end
// category - class exists but is missing selectors
@interface CAStateElement:NSObject
@end
@interface CAStateElement(Stub)
@end
@implementation CAStateElement(Stub)
// CAMLTypeSupportedForKey: c c24@0:8@16
-(char)CAMLTypeSupportedForKey:(id)arg2
{
	return 0;
}
@end
// category - class exists but is missing selectors
@interface CAAnimation:NSObject
@end
@interface CAAnimation(Stub)
@end
@implementation CAAnimation(Stub)
// CAMLTypeSupportedForKey: c c24@0:8@16
-(char)CAMLTypeSupportedForKey:(id)arg2
{
	return 0;
}
@end
// category - class exists but is missing selectors
@interface CAMatchMoveAnimation:NSObject
@end
@interface CAMatchMoveAnimation(Stub)
@end
@implementation CAMatchMoveAnimation(Stub)
// usesNormalizedCoordinates c c16@0:8
-(char)usesNormalizedCoordinates
{
	return 0;
}
// setUsesNormalizedCoordinates: v v20@0:8c16
-(void)setUsesNormalizedCoordinates:(char)arg2
{
	return ;
}
@end
// stub - class doesn't exist at all
@interface CAMatchPropertyAnimation:NSObject
{
}
@end
@implementation CAMatchPropertyAnimation
// sourceLayerRenderId Q Q16@0:8
-(unsigned long long)sourceLayerRenderId
{
	return 0;
}
// sourceContextId I I16@0:8
-(unsigned int)sourceContextId
{
	return 0;
}
// _propertyFlagsForLayer: I I24@0:8@16
-(unsigned int)_propertyFlagsForLayer:(id)arg2
{
	return 0;
}
// _copyRenderAnimationForLayer: ^{Animation=^^?{Atomic={?=i}}f{Ref<CA::Render::Timing>=^{Timing}}{Ref<CA::Render::Vector>=^{Vector}}^{__CFString}QIIII} ^{Animation=^^?{Atomic={?=i}}f{Ref<CA::Render::Timing>=^{Timing}}{Ref<CA::Render::Vector>=^{Vector}}^{__CFString}QIIII}24@0:8@16
-(void*)_copyRenderAnimationForLayer:(id)arg2
{
	return NULL;
}
// _setCARenderAnimation:layer: c c32@0:8^{Animation=^^?{Atomic={?=i}}f{Ref<CA::Render::Timing>=^{Timing}}{Ref<CA::Render::Vector>=^{Vector}}^{__CFString}QIIII}16@24
-(char)_setCARenderAnimation:(void*)arg2 layer:(id)arg3
{
	return 0;
}
// keyPath @ @16@0:8
-(id)keyPath
{
	return nil;
}
// setKeyPath: v v24@0:8@16
-(void)setKeyPath:(id)arg2
{
	return ;
}
// setAdditive: v v20@0:8c16
-(void)setAdditive:(char)arg2
{
	return ;
}
// isAdditive c c16@0:8
-(char)isAdditive
{
	return 0;
}
// setSourceLayerRenderId: v v24@0:8Q16
-(void)setSourceLayerRenderId:(unsigned long long)arg2
{
	return ;
}
// setSourceContextId: v v20@0:8I16
-(void)setSourceContextId:(unsigned int)arg2
{
	return ;
}
// setSourceLayer: v v24@0:8@16
-(void)setSourceLayer:(id)arg2
{
	return ;
}
// sourceLayer @ @16@0:8
-(id)sourceLayer
{
	return nil;
}
// applyForTime:presentationObject:modelObject: v v40@0:8d16@24@32
-(void)applyForTime:(double)arg2 presentationObject:(id)arg3 modelObject:(id)arg4
{
	return ;
}
// CA_attributes @ @16@0:8
+(id)CA_attributes
{
	return nil;
}
@end
// category - class exists but is missing selectors
@interface CALayerHost:NSObject
@end
@interface CALayerHost(Stub)
@end
@implementation CALayerHost(Stub)
// setInheritsSecurity: v v20@0:8c16
-(void)setInheritsSecurity:(char)arg2
{
	return ;
}
// inheritsSecurity c c16@0:8
-(char)inheritsSecurity
{
	return 0;
}
@end
// category - class exists but is missing selectors
@interface CATransaction:NSObject
@end
@interface CATransaction(Stub)
@end
@implementation CATransaction(Stub)
// setRemoteInputMachTime: v v24@0:8Q16
+(void)setRemoteInputMachTime:(unsigned long long)arg2
{
	return ;
}
// remoteInputMachTime Q Q16@0:8
+(unsigned long long)remoteInputMachTime
{
	return 0;
}
@end
// category - class exists but is missing selectors
@interface CABackdropLayer:NSObject
@end
@interface CABackdropLayer(Stub)
@end
@implementation CABackdropLayer(Stub)
// ignoresScreenClip c c16@0:8
-(char)ignoresScreenClip
{
	return 0;
}
// setIgnoresScreenClip: v v20@0:8c16
-(void)setIgnoresScreenClip:(char)arg2
{
	return ;
}
// isInverseMeshed c c16@0:8
-(char)isInverseMeshed
{
	return 0;
}
// setInverseMeshed: v v20@0:8c16
-(void)setInverseMeshed:(char)arg2
{
	return ;
}
@end
// category - class exists but is missing selectors
@interface CAStateRemoveElement:NSObject
@end
@interface CAStateRemoveElement(Stub)
@end
@implementation CAStateRemoveElement(Stub)
// CAMLTypeSupportedForKey: c c24@0:8@16
-(char)CAMLTypeSupportedForKey:(id)arg2
{
	return 0;
}
@end
NSString* kCACFContextBitsPerComponentHint=@"kCACFContextBitsPerComponentHint";
NSString* kCACFContextDefinesDisplayBounds=@"kCACFContextDefinesDisplayBounds";
NSString* kCACFContextDisplayFilter=@"kCACFContextDisplayFilter";
NSString* kCACFContextDisplayId=@"kCACFContextDisplayId";
NSString* kCACFContextDisplayName=@"kCACFContextDisplayName";
NSString* kCACFContextIgnoresHitTest=@"kCACFContextIgnoresHitTest";
NSString* kCAContextAllowsRecursiveScreenCapture=@"kCAContextAllowsRecursiveScreenCapture";
NSString* kCAContextBitsPerComponentHint=@"kCAContextBitsPerComponentHint";
NSString* kCAContextDisplayFilter=@"kCAContextDisplayFilter";
NSString* kCAContextDisplayable=@"kCAContextDisplayable";
NSString* kCAContextReversesContentsAreFlippedInCatalystEnvironment=@"kCAContextReversesContentsAreFlippedInCatalystEnvironment";
NSString* kCAContextSecure=@"kCAContextSecure";
NSString* kCACornerCurveCircular=@"kCACornerCurveCircular";
NSString* kCACornerCurveContinuous=@"kCACornerCurveContinuous";
NSString* kCADisplayClonedFrameCount=@"kCADisplayClonedFrameCount";
NSString* kCADisplayDeviceName=@"kCADisplayDeviceName";
NSString* kCADisplayFrameCount=@"kCADisplayFrameCount";
NSString* kCADisplayId=@"kCADisplayId";
NSString* kCADisplayName=@"kCADisplayName";
NSString* kCADisplaySkippedClonedFrameCount=@"kCADisplaySkippedClonedFrameCount";
NSString* kCADisplaySkippedFrameCount=@"kCADisplaySkippedFrameCount";
NSString* kCADisplayTimingOffset=@"kCADisplayTimingOffset";
NSString* kCADisplayTimingRefreshRate=@"kCADisplayTimingRefreshRate";
NSString* kCAEmitterBehaviorColorOverDistance=@"kCAEmitterBehaviorColorOverDistance";
NSString* kCAEmitterBehaviorValueOverDistance=@"kCAEmitterBehaviorValueOverDistance";
NSString* kCAFilterASG77=@"kCAFilterASG77";
NSString* kCAFilterAlphaThreshold=@"kCAFilterAlphaThreshold";
NSString* kCAFilterAverageColor=@"kCAFilterAverageColor";
NSString* kCAFilterColorBlendMode=@"kCAFilterColorBlendMode";
NSString* kCAFilterCurves=@"kCAFilterCurves";
NSString* kCAFilterHueBlendMode=@"kCAFilterHueBlendMode";
NSString* kCAFilterInputAddWhite=@"kCAFilterInputAddWhite";
NSString* kCAFilterInputAlphaValues=@"kCAFilterInputAlphaValues";
NSString* kCAFilterInputAmount=@"kCAFilterInputAmount";
NSString* kCAFilterInputAngle=@"kCAFilterInputAngle";
NSString* kCAFilterInputAspectRatio=@"kCAFilterInputAspectRatio";
NSString* kCAFilterInputBackColor0=@"kCAFilterInputBackColor0";
NSString* kCAFilterInputBackColor1=@"kCAFilterInputBackColor1";
NSString* kCAFilterInputBackEnabled=@"kCAFilterInputBackEnabled";
NSString* kCAFilterInputBias=@"kCAFilterInputBias";
NSString* kCAFilterInputBlueValues=@"kCAFilterInputBlueValues";
NSString* kCAFilterInputBounds=@"kCAFilterInputBounds";
NSString* kCAFilterInputColor=@"kCAFilterInputColor";
NSString* kCAFilterInputColor0=@"kCAFilterInputColor0";
NSString* kCAFilterInputColor1=@"kCAFilterInputColor1";
NSString* kCAFilterInputColorMap=@"kCAFilterInputColorMap";
NSString* kCAFilterInputColorMatrix=@"kCAFilterInputColorMatrix";
NSString* kCAFilterInputDither=@"kCAFilterInputDither";
NSString* kCAFilterInputEndAngle=@"kCAFilterInputEndAngle";
NSString* kCAFilterInputFrontColor=@"kCAFilterInputFrontColor";
NSString* kCAFilterInputFrontEnabled=@"kCAFilterInputFrontEnabled";
NSString* kCAFilterInputGreenValues=@"kCAFilterInputGreenValues";
NSString* kCAFilterInputHSVSpace=@"kCAFilterInputHSVSpace";
NSString* kCAFilterInputHardEdges=@"kCAFilterInputHardEdges";
NSString* kCAFilterInputIntermediateBitDepth=@"kCAFilterInputIntermediateBitDepth";
NSString* kCAFilterInputLinear=@"kCAFilterInputLinear";
NSString* kCAFilterInputNormalizeEdges=@"kCAFilterInputNormalizeEdges";
NSString* kCAFilterInputOverlayOpacity=@"kCAFilterInputOverlayOpacity";
NSString* kCAFilterInputQuality=@"kCAFilterInputQuality";
NSString* kCAFilterInputRadius=@"kCAFilterInputRadius";
NSString* kCAFilterInputRedValues=@"kCAFilterInputRedValues";
NSString* kCAFilterInputReversed=@"kCAFilterInputReversed";
NSString* kCAFilterInputScale=@"kCAFilterInputScale";
NSString* kCAFilterInputShadowBounds=@"kCAFilterInputShadowBounds";
NSString* kCAFilterInputShadowColor=@"kCAFilterInputShadowColor";
NSString* kCAFilterInputStartAngle=@"kCAFilterInputStartAngle";
NSString* kCAFilterInputTime=@"kCAFilterInputTime";
NSString* kCAFilterInputValues=@"kCAFilterInputValues";
NSString* kCAFilterLuminosityBlendMode=@"kCAFilterLuminosityBlendMode";
NSString* kCAFilterOpacityPair=@"kCAFilterOpacityPair";
NSString* kCAFilterSaturationBlendMode=@"kCAFilterSaturationBlendMode";
NSString* kCAFilterVibrantColorMatrix=@"kCAFilterVibrantColorMatrix";
NSString* kCALayerSecurityModeInsecure=@"kCALayerSecurityModeInsecure";
NSString* kCALayerSecurityModeSecure=@"kCALayerSecurityModeSecure";
NSString* kCALayerSecurityModeUnrestricted=@"kCALayerSecurityModeUnrestricted";
NSString* kCALayerSeparatedOptionMarkerId=@"kCALayerSeparatedOptionMarkerId";
NSString* kCARendererClearsDestination=@"kCARendererClearsDestination";
NSString* kCASecureModeViolationContextId=@"kCASecureModeViolationContextId";
NSString* kCASecureModeViolationHostContextId=@"kCASecureModeViolationHostContextId";
NSString* kCASecureModeViolationHostProcessId=@"kCASecureModeViolationHostProcessId";
NSString* kCASecureModeViolationLayerNames=@"kCASecureModeViolationLayerNames";
NSString* kCASecureModeViolationProcessId=@"kCASecureModeViolationProcessId";
NSString* kCASnapshotIgnoreLayerFixup=@"kCASnapshotIgnoreLayerFixup";
NSString* kCAWindowServerClone_CaptureDisplay=@"kCAWindowServerClone_CaptureDisplay";
NSString* kCAWindowServerClone_DisableOverscan=@"kCAWindowServerClone_DisableOverscan";
NSString* kCAWindowServerClone_DisableRotation=@"kCAWindowServerClone_DisableRotation";
NSString* kCAWindowServerClone_DisableScaling=@"kCAWindowServerClone_DisableScaling";
NSString* kCAWindowServerClone_DisableYUV=@"kCAWindowServerClone_DisableYUV";
NSString* kCAWindowServerClone_NoReplayScaling=@"kCAWindowServerClone_NoReplayScaling";
NSString* kCAWindowServerClone_ReplayContexts=@"kCAWindowServerClone_ReplayContexts";
NSString* kCAWindowServerColorMode_Auto=@"kCAWindowServerColorMode_Auto";
NSString* kCAWindowServerColorMode_RGBFullRange=@"kCAWindowServerColorMode_RGBFullRange";
NSString* kCAWindowServerColorMode_RGBLimitedRange=@"kCAWindowServerColorMode_RGBLimitedRange";
NSString* kCAWindowServerColorMode_YCbCr=@"kCAWindowServerColorMode_YCbCr";
NSString* kCAWindowServerDisableUpdatesOnMainDisplay=@"kCAWindowServerDisableUpdatesOnMainDisplay";
NSString* kCAWindowServerOrientation_LandscapeLeft=@"kCAWindowServerOrientation_LandscapeLeft";
NSString* kCAWindowServerOrientation_LandscapeRight=@"kCAWindowServerOrientation_LandscapeRight";
NSString* kCAWindowServerOrientation_Portrait=@"kCAWindowServerOrientation_Portrait";
NSString* kCAWindowServerOrientation_PortraitUpsideDown=@"kCAWindowServerOrientation_PortraitUpsideDown";
NSString* kCAWindowServerTVMode_NTSC_M=@"kCAWindowServerTVMode_NTSC_M";
NSString* kCAWindowServerTVMode_PAL_BGHID=@"kCAWindowServerTVMode_PAL_BGHID";
NSString* kCAWindowServerTVSignalType_Component=@"kCAWindowServerTVSignalType_Component";
NSString* kCAWindowServerTVSignalType_Composite=@"kCAWindowServerTVSignalType_Composite";
NSString* kCAWindowServerTVSignalType_Digital=@"kCAWindowServerTVSignalType_Digital";
NSString* kCAWindowServerTVSignalType_None=@"kCAWindowServerTVSignalType_None";
unsigned long CABackingStoreHasVerticalPadding()
{
	return 0;
}
unsigned long CAColorMatrixConcat()
{
	return 0;
}
unsigned long CAColorMatrixIdentity()
{
	return 0;
}
unsigned long CAColorMatrixMakeBrightness()
{
	return 0;
}
unsigned long CAColorMatrixMakeColorSourceOver()
{
	return 0;
}
unsigned long CAColorMatrixMakeContrast()
{
	return 0;
}
unsigned long CAColorMatrixMakeMultiplyColor()
{
	return 0;
}
unsigned long CAColorMatrixMakeSaturation()
{
	return 0;
}
unsigned long CAGetDebugMessageColor()
{
	return 0;
}
unsigned long CAImageQueueFlushWithTransaction()
{
	return 0;
}
unsigned long CAImageQueueGetIdentifier()
{
	return 0;
}
unsigned long CAImageQueueGetRotationFlags()
{
	return 0;
}

unsigned long CAImageQueueSetIdentifier()
{
	return 0;
}
unsigned long CAImageQueueSetMediaTiming()
{
	return 0;
}
unsigned long CAImageQueueSetReducedPollingTimeRange()
{
	return 0;
}
unsigned long CAImageQueueUnregisterBuffer()
{
	return 0;
}
unsigned long CAInvalidRenderId()
{
	return 0;
}
unsigned long CAMetalLayerDidQueryMetalDevice()
{
	return 0;
}
unsigned long CARenderContextGetRemoteInputMachTime()
{
	return 0;
}
unsigned long CARenderMTLCompileShader()
{
	return 0;
}
unsigned long CARenderMTLLoadPipelines()
{
	return 0;
}
unsigned long CARenderOGLRenderSeparated()
{
	return 0;
}
unsigned long CARenderPresentAcquire()
{
	return 0;
}
unsigned long CARenderPresentRelease()
{
	return 0;
}
unsigned long CARenderServerCaptureDisplay()
{
	return 0;
}
unsigned long CARenderServerCaptureDisplayClientList()
{
	return 0;
}
unsigned long CARenderServerCaptureDisplayClientListWithTransform()
{
	return 0;
}
unsigned long CARenderServerCaptureDisplayClientListWithTransformList()
{
	return 0;
}
unsigned long CARenderServerCaptureDisplayLayerWithTransformTimeOffsetAndFlags()
{
	return 0;
}
unsigned long CARenderServerCaptureDisplayWithTransform()
{
	return 0;
}
unsigned long CARenderServerCaptureLayer()
{
	return 0;
}
unsigned long CARenderServerCaptureLayerWithTransform()
{
	return 0;
}
unsigned long CARenderServerCaptureLayerWithTransformAndTimeOffset()
{
	return 0;
}
unsigned long CARenderServerGetDisplayLogicalBounds()
{
	return 0;
}
unsigned long CARenderServerGetPerformanceInfo()
{
	return 0;
}
unsigned long CARenderServerGetStatistics()
{
	return 0;
}
unsigned long CARenderServerPostPowerLog()
{
	return 0;
}
unsigned long CARenderServerPurgeServer()
{
	return 0;
}
unsigned long CARenderServerRenderDisplay()
{
	return 0;
}
unsigned long CARenderServerRenderDisplayClientList()
{
	return 0;
}
unsigned long CARenderServerRenderDisplayClientListWithTransform()
{
	return 0;
}
unsigned long CARenderServerRenderDisplayClientListWithTransformList()
{
	return 0;
}
unsigned long CARenderServerRenderDisplayLayerWithTransformAndTimeOffset()
{
	return 0;
}
unsigned long CARenderServerRenderDisplayLayerWithTransformTimeOffsetAndFlags()
{
	return 0;
}
unsigned long CARenderServerRenderLayer()
{
	return 0;
}
unsigned long CARenderServerRenderLayerWithTransform()
{
	return 0;
}
unsigned long CARenderServerRenderLayerWithTransformAndTimeOffset()
{
	return 0;
}
unsigned long CARenderServerSetAXMatrix()
{
	return 0;
}
unsigned long CARenderServerSetCacheAsynchronousSurfaces()
{
	return 0;
}
unsigned long CARenderServerSetRootQueue()
{
	return 0;
}
unsigned long CARenderSetSeparatedLayerBlock()
{
	return 0;
}
unsigned long CARenderUpdateGetProtectionOptions()
{
	return 0;
}
unsigned long CARenderUpdateGetUnobscuredRegionOfInterest()
{
	return 0;
}
unsigned long CARenderUpdateSetDisplayAttributes()
{
	return 0;
}
unsigned long CARenderUpdateSetInterval()
{
	return 0;
}
unsigned long CASeparatedOptionMetadataCreate()
{
	return 0;
}
unsigned long CASeparatedOptionMetadataGetDefaultValue()
{
	return 0;
}
unsigned long CASeparatedOptionMetadataGetName()
{
	return 0;
}
unsigned long CAViewGetPixelFormat()
{
	return 0;
}
unsigned long CAViewSetPixelFormat()
{
	return 0;
}